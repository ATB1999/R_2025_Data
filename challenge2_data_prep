library(tidyverse)
library(skimr)



# Challenge Transfermarket ------------------------------------------------

### NO FEM SERVIR game_events, games, player_valuations i transfers PER MUNTAR LES DADES DEL MODEL

files <- list.files(path = "./DATA", pattern = "\\.csv$", full.names = TRUE)

list2env(map(files, read_csv) %>%
  set_names(nm = tools::file_path_sans_ext(basename(files))), envir = .GlobalEnv)

dataframes <- list(appearances, club_games, clubs, competitions, game_events, game_lineups, games, player_valuations, players, transfers)

# 
# View(appearances)
# View(club_games)
# View(clubs)
# View(competitions)
# View(game_events)
# View(game_lineups)
# View(games)
# View(player_valuations)
# View(players)
# View(transfers)




# Data ------------------------------------------------------------

competitions <- competitions %>% select(competition_id, competition_name = name, type, sub_type, is_major_national_league)
game_lineups <- game_lineups %>% select(game_lineups_id, game_id, player_id, player_id, club_id, lineup_type = type)
club_games <- club_games %>% select(game_id, club_id, is_win)

## Players and Clubs data selection + join by club -------------------------

#Selection of variables of interest
players <- players %>%
  select(player_name = name ,player_id ,  current_club_name, country_of_citizenship, date_of_birth, position, sub_position, foot, height_in_cm, agent_name, market_value_in_eur, highest_market_value_in_eur, last_season)

clubs <- clubs %>%
  select(club_name = name, club_id, domestic_competition_id, squad_size, average_age, foreigners_number, national_team_players, stadium_seats)

players_clubs <- left_join(x = players, y = clubs, by = c("current_club_name" = "club_name"))

## Joining data to uncover domestic competition -------------------------------

players_clubs <- players_clubs %>%
  left_join(y = competitions, by = c("domestic_competition_id" = "competition_id")) %>% print()


# Creation of variables of interest ---------------------------------------


## Goals, assists and minutes played by sub_type of competition ----------------------------

appearances <- appearances %>% left_join(y = competitions, by = "competition_id") %>% print()


### Player Metrics ----------------------------------------------------------

player_metrics <- appearances %>%
  summarise(
    .by = c(player_id, sub_type),
    footballer_appearances = n(),
    footballer_goals = sum(goals, na.rm = TRUE),
    footballer_assists = sum(assists, na.rm = TRUE),
    footballer_minutes_played = sum(minutes_played, na.rm = TRUE)
  ) %>%
  mutate(
    across(
      .cols = c(footballer_goals, footballer_assists, footballer_minutes_played),               
      .fns = ~ .x / footballer_appearances,                               
      .names = "{.col}_per_match"                             
    )
  ) %>% arrange(desc(player_id)) %>% print()



### Club Metrics ------------------------------------------------------------

club_metrics <- appearances %>%
  summarise(
    .by = c(player_current_club_id, sub_type),
    club_appearances = n(),
    club_goals = sum(goals, na.rm = TRUE),
    club_assists = sum(assists, na.rm = TRUE),
    club_minutes_played = sum(minutes_played, na.rm = TRUE)
  ) %>%
  mutate(
    across(
      .cols = c(club_goals, club_assists, club_minutes_played),               
      .fns = ~ .x / club_appearances,                               
      .names = "{.col}_per_match"                             
    )
  ) %>% arrange(desc(player_current_club_id)) %>% print()

matches_data <- appearances %>% select(player_id, player_current_club_id, sub_type) %>% distinct() %>%
  inner_join(y = club_metrics, by = c("player_current_club_id", "sub_type")) %>%
  inner_join(y = player_metrics, by = c("player_id", "sub_type")) %>% print()


### Added Value to Club -----------------------------------------------------

matches_data <- matches_data %>%
  mutate(added_value_appearances = footballer_appearances / club_appearances,
         added_value_goals = footballer_goals / club_goals,
         added_value_assists = footballer_assists / club_assists,
         added_value_minutes_played = footballer_minutes_played / club_minutes_played) %>%
  mutate(
    across(
      .cols = c(starts_with("added_value")),
      .fns = ~ ifelse(is.nan(.x), 0, .x)
    )
  ) %>%
  print()

sapply(X = matches_data, FUN = function(x) {sum(is.na(x))})
















### Pivoting matches_data to get tidy data and granularity by competition --------

#### AQUÍ ESTÀ EL TEMA: PASSEM A MOLTES VARIABLES SI VOLEM INFO. PER COMPETICIÓ, PERÒ
#### POTSER ENS ESTEM PASSANT I HO ESTEM FENT MASSA GRAN


matches_data_pivoted <- matches_data %>%
  pivot_wider(
    id_cols = c(player_id, player_current_club_id),
    names_from = sub_type,
    values_from = -c(player_id, player_current_club_id, sub_type),
    names_glue = "{.value}_{sub_type}",
    values_fill = 0
  ) 

dim(matches_data_pivoted)












## Getting other variables of reference ------------------------------------

#Team Wins with the player

wins_info <- game_lineups %>%
  left_join(y = club_games, by = c("game_id", "club_id")) %>% print()

intersect(names(matches_data_pivoted), names(game_lineups))

#Percentage of wins overall and by substitute / starting lineup

wins_pct <- wins_info %>%
  mutate(.by = player_id,
            pct_win = sum(is_win) / n()) %>%
  mutate(.by = c(player_id, lineup_type),
         pct_win_lineup = sum(is_win) / n()) %>%
  distinct(player_id, club_id, lineup_type, pct_win, pct_win_lineup) %>%
  arrange(desc(player_id)) %>% print()

#Pivoting wins percentage by lineup

wins_pct <- wins_pct %>%
  pivot_wider(
    id_cols = c(player_id, club_id, pct_win),
    names_from = lineup_type,
    values_from = -c(player_id, club_id, lineup_type, pct_win),
    names_glue = "{.value}_{lineup_type}",
    values_fill = 0
  ) 

  
# Percentage of matches in starting lineup

starting_lineup <- wins_info %>%
  summarise(.by = player_id,
            starting_pct = sum(lineup_type == "starting_lineup") / n())

#Joining to have lineups and wins percentage in one table

lineups_wins_percentages <- wins_pct %>%
  left_join(y = starting_lineup, by = c("player_id")) %>% print()



# Putting everything back together again ----------------------------------

# Make sure we have data for all players dictionary contained within data
#data: data frame with information about the players and their clubs.
#lineups_wins_percentages: information about percentage of matches in starting 11 and wins.
#matches_data_pivoted: players + clubs appearances, goals assists and minutes played in total, per match and weight within the clubs per competition subtype.

# We make sure we really do have missing players data that might be disregarded
# with an inner join due to their absence.
setdiff(matches_data_pivoted$player_id, players_clubs$player_id)
setdiff(lineups_wins_percentages$player_id, players_clubs$player_id)

#We join
data <- inner_join(x = players_clubs, y = lineups_wins_percentages, by = c("player_id", "club_id")) %>%
  inner_join(y = matches_data_pivoted, by = c("player_id", "club_id" = "player_current_club_id")) %>% print()





# Potential ideas: average attendance in matches won, average attendance, mode of tactical formation...
# NO S'HA EXPLORAT LA VALORACIÓ A TRAVÉS DELS ANYS (player_valuations) PERQUÈ ELS MODELS TIRARIEN MOLT PER ALLÀ I PERQUÈ
# ENS FALTARIEN DADES. SI VOLS, PODRÍEM FER-LOS INCLOURE ELS DELS TRES ÚLTIMS ANYS DEL JUGADOR EN ACTIU O SIMILAR.





# MACHINE LEARNING --------------------------------------------------------


## Cleaning the data -------------------------------------------------------

#Variables we do not want
data <- data %>%
  select(-c(player_id, last_season, club_id, domestic_competition_id, competition_name, type, sub_type)) %>% print()


#Turning date_of_birth into age 
data <- data %>%
  mutate(age = as.numeric(difftime(Sys.Date(), date_of_birth, units = "days")) / 365,
         age = floor(age)) %>% select(-date_of_birth)

#[PENDING DES D'AQUÍ]

# POTENTIAL IDEAS

#- doing one model for each specific club.
#- Going back to the data and focusing only on major domestic leagues (is_major_national_league) to value them as a whole.
#- Other standard machine learning with tidymodels applied (whole class process).
